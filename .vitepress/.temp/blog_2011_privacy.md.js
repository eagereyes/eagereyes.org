import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"Paper: Privacy-Preserving Visualization","description":"The point of visualization is usually to reveal as much of the structure of a dataset as possible. But what if the data is sensitive or proprietary, and the person doing the analysis is not supposed to be able to know everything about it? In a paper to be presented next week at InfoVis, my Ph.D. student Aritra Dasgupta and I describe the issues involved in privacy-preserving visualization, and propose a variation of parallel coordinates that controls the amount of information shown to the user.","frontmatter":{"title":"Paper: Privacy-Preserving Visualization","description":"The point of visualization is usually to reveal as much of the structure of a dataset as possible. But what if the data is sensitive or proprietary, and the person doing the analysis is not supposed to be able to know everything about it? In a paper to be presented next week at InfoVis, my Ph.D. student Aritra Dasgupta and I describe the issues involved in privacy-preserving visualization, and propose a variation of parallel coordinates that controls the amount of information shown to the user.","date":"2011-10-16T21:34:01.000Z","tags":"VisWeek, papers","featuredImage":"https://media.eagereyes.org/media/2011/privacy-teaser.png"},"headers":[],"relativePath":"blog/2011/privacy.md","filePath":"blog/2011/privacy.md"}');
const _sfc_main = { name: "blog/2011/privacy.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><p align="center"><img src="https://media.eagereyes.org/media/2011/privacy-teaser.png" alt="" width="600" height="388"></p><h1 id="paper-privacy-preserving-visualization" tabindex="-1">Paper: Privacy-Preserving Visualization <a class="header-anchor" href="#paper-privacy-preserving-visualization" aria-label="Permalink to &quot;Paper: Privacy-Preserving Visualization&quot;">​</a></h1><p>The point of visualization is usually to reveal as much of the structure of a dataset as possible. But what if the data is sensitive or proprietary, and the person doing the analysis is not supposed to be able to know everything about it? In a paper to be presented <a href="http://visweek.org/visweek/2011/paper-session/all/infovis">next week at InfoVis</a>, my Ph.D. student Aritra Dasgupta and I describe the issues involved in privacy-preserving visualization, and propose a variation of <a href="/techniques/parallel-coordinates">parallel coordinates</a> that controls the amount of information shown to the user.</p><h2 id="naive-approaches" tabindex="-1">Naive Approaches <a class="header-anchor" href="#naive-approaches" aria-label="Permalink to &quot;Naive Approaches&quot;">​</a></h2><p>As with everything else, there is an obvious solution to this problem that doesn’t work. We started out by looking at the data mining literature, where preserving privacy has been an issue for a while. After running a dataset through an algorithm called k-members clustering, and adapting parallel coordinates to be able to show clusters instead of lines, we ended up with this:</p><p align="center"><img src="https://media.eagereyes.org/media/2011/privacy-bad.png" alt="" width="600" height="242"></p><p>While this is obviously useless for visualization, this is the way the data can be passed on to third parties without knowledge about what they are going to do with it, while guaranteeing a minimum level of privacy.</p><h2 id="a-visualization-solution" tabindex="-1">A Visualization Solution <a class="header-anchor" href="#a-visualization-solution" aria-label="Permalink to &quot;A Visualization Solution&quot;">​</a></h2><p>But what if we know a bit more? In this case, what if we know that the user will be looking at the data as a parallel coordinates-like visualization, the axis order in the visualization, and the size of the display? In that case, we can do a bit better:</p><p align="center"><img src="https://media.eagereyes.org/media/2011/privacy-good.png" alt="" width="600" height="242"></p><p>The key to this is realizing what the user can learn about the data from the visualization, and using that to guide the clustering. Traditional clusters break down the data space, but we cluster in visual space: we get different clusters between each pair of axes. We also use a different distance metric to figure out which clusters are best, again based on visual criteria rather than data space. Finally, we use the distribution of values to help keep clusters small while keeping the number of values per cluster the same (which is the key criterion for guaranteeing privacy).</p><p>The result is much fuzzier than regular parallel coordinates, but that is of course the point. At the same time, we keep the utility of the resulting visualization much higher than just using a standard clustering approach. This is a very tough problem in data mining, because even very weak privacy guarantees make the data all but useless. With our technique, we believe that we can keep the utility much higher while still guaranteeing the same level of privacy.</p><p>The key to all this is approaching the problem from a visual point of view, rather than from the data. I believe that there is a lot more work to be done not only in privacy preservation, but also more generally in figuring out how to make many existing data mining and other techniques work in a more visualization-centric way.</p><hr><p>Aritra Dasgupta, Robert Kosara, <a href="/publications/Dasgupta-InfoVis-2011">Adaptive Privacy-Preserving Visualization Using Parallel Coordinates</a>, <em>Transactions on Visualization and Computer Graphics (Proceedings InfoVis)</em>, 2011.</p><p>The paper will be presented in the very first InfoVis session on Wednesday, October 26, 8:30-10:00am.</p><p><em>Posted by <a href="/about">Robert Kosara</a> on October 16, 2011</em></p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("blog/2011/privacy.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const privacy = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  privacy as default
};
