import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"Turning a Table into a Tree: Growing Parallel Sets into a Purposeful Project","description":"Academic software projects tend to grow organically from an initial idea into something complex and unwieldy that has enough novelty to publish a paper about. Features get added at the last minute to be able to include them in the paper, without much time to think about how to integrate them well – or how to adapt the underlying architecture of the entire program to make them fit. The result is that many of these programs are hacked together, buggy, and embarrassing. Consequently, they do not get released together with the paper, which leads to a fundamental problem in visualization: reproducibility is possible in theory, but in practice rarely happens. Many programs and new techniques are also built from scratch rather than based on existing ones. The optimal model would be to release the software right away, then come back to it later to refine and re-architect it to reflect the overall design goals of the project. This is seldom done, because there is usually nothing to be gained from a re-implementation (or thorough refactoring), so people move on to the next project. The original prototype implementation of Parallel Sets was no different. But we decided that in order to get the idea out of academia into actual use, we would need a working program. So we set out to rethink and redesign it, based on a better understanding of the necessary internal structures we gained over time. We did not only re-engineer the program, but also revise the visualization itself to clarify the overall idea.","frontmatter":{"title":"Turning a Table into a Tree: Growing Parallel Sets into a Purposeful Project","description":"Academic software projects tend to grow organically from an initial idea into something complex and unwieldy that has enough novelty to publish a paper about. Features get added at the last minute to be able to include them in the paper, without much time to think about how to integrate them well – or how to adapt the underlying architecture of the entire program to make them fit. The result is that many of these programs are hacked together, buggy, and embarrassing. Consequently, they do not get released together with the paper, which leads to a fundamental problem in visualization: reproducibility is possible in theory, but in practice rarely happens. Many programs and new techniques are also built from scratch rather than based on existing ones. The optimal model would be to release the software right away, then come back to it later to refine and re-architect it to reflect the overall design goals of the project. This is seldom done, because there is usually nothing to be gained from a re-implementation (or thorough refactoring), so people move on to the next project. The original prototype implementation of Parallel Sets was no different. But we decided that in order to get the idea out of academia into actual use, we would need a working program. So we set out to rethink and redesign it, based on a better understanding of the necessary internal structures we gained over time. We did not only re-engineer the program, but also revise the visualization itself to clarify the overall idea."},"headers":[],"relativePath":"publications/Kosara-BeautifulVis-2010.md","filePath":"publications/Kosara-BeautifulVis-2010.md"}');
const _sfc_main = { name: "publications/Kosara-BeautifulVis-2010.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="turning-a-table-into-a-tree-growing-parallel-sets-into-a-purposeful-project" tabindex="-1">Turning a Table into a Tree: Growing Parallel Sets into a Purposeful Project <a class="header-anchor" href="#turning-a-table-into-a-tree-growing-parallel-sets-into-a-purposeful-project" aria-label="Permalink to &quot;Turning a Table into a Tree: Growing Parallel Sets into a Purposeful Project&quot;">​</a></h1><blockquote><p><em>Academic software projects tend to grow organically from an initial idea into something complex and unwieldy that has enough novelty to publish a paper about. Features get added at the last minute to be able to include them in the paper, without much time to think about how to integrate them well – or how to adapt the underlying architecture of the entire program to make them fit. The result is that many of these programs are hacked together, buggy, and embarrassing. Consequently, they do not get released together with the paper, which leads to a fundamental problem in visualization: reproducibility is possible in theory, but in practice rarely happens. Many programs and new techniques are also built from scratch rather than based on existing ones. The optimal model would be to release the software right away, then come back to it later to refine and re-architect it to reflect the overall design goals of the project. This is seldom done, because there is usually nothing to be gained from a re-implementation (or thorough refactoring), so people move on to the next project. The original prototype implementation of Parallel Sets was no different. But we decided that in order to get the idea out of academia into actual use, we would need a working program. So we set out to rethink and redesign it, based on a better understanding of the necessary internal structures we gained over time. We did not only re-engineer the program, but also revise the visualization itself to clarify the overall idea.</em></p></blockquote><p>Robert Kosara, <a href="https://media.eagereyes.org/papers/2010/Kosara-BeautifulVis-2010.pdf" target="_blank">Turning a Table into a Tree: Growing Parallel Sets into a Purposeful Project</a>, in Steele, Illiinsky, <em>Beautiful Visualization</em>, pp. 193–204, O&#39;Reilley Media, 2010.</p><div class="language-bibtex"><button title="Copy Code" class="copy"></button><span class="lang">bibtex</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">@</span><span style="${ssrRenderStyle({ "color": "#F78C6C" })}">inbook</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">Kosara:BeautifulVis:2010</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">	</span><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">year</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">=</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#F78C6C" })}">2010</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">	</span><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">title</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">=</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">Turning a Table into a Tree: Growing Parallel Sets into a Purposeful Project</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">	</span><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">author</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">=</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">Robert Kosara</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">	</span><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">editor</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">=</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">Steele, Illiinsky</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">	</span><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">venue</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">=</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">Beautiful Visualization</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">	</span><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">pages</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">=</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">193–204</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">	</span><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">publisher</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">=</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">O&#39;Reilley Media</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">	</span><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">abstract</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">=</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">Academic software projects tend to grow organically from an initial idea into something complex and unwieldy that has enough novelty to publish a paper about. Features get added at the last minute to be able to include them in the paper, without much time to think about how to integrate them well – or how to adapt the underlying architecture of the entire program to make them fit. The result is that many of these programs are hacked together, buggy, and embarrassing. Consequently, they do not get released together with the paper, which leads to a fundamental problem in visualization: reproducibility is possible in theory, but in practice rarely happens. Many programs and new techniques are also built from scratch rather than based on existing ones. The optimal model would be to release the software right away, then come back to it later to refine and re-architect it to reflect the overall design goals of the project. This is seldom done, because there is usually nothing to be gained from a re-implementation (or thorough refactoring), so people move on to the next project. The original prototype implementation of Parallel Sets was no different. But we decided that in order to get the idea out of academia into actual use, we would need a working program. So we set out to rethink and redesign it, based on a better understanding of the necessary internal structures we gained over time. We did not only re-engineer the program, but also revise the visualization itself to clarify the overall idea.</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span></span></code></pre></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("publications/Kosara-BeautifulVis-2010.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const KosaraBeautifulVis2010 = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  KosaraBeautifulVis2010 as default
};
